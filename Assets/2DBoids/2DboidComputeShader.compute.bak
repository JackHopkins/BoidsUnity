#define blockSize 256 // Reduced from 1024 to 256 to reduce register pressure in the UpdateBoids kernel
#define NODE_LEAF 1
#define NODE_ACTIVE 2
#define MaxQuadNodes 16384

struct Boid {
  float2 pos;
  float2 vel;
  uint team;
  uint status; // 0=regular, 1=officer
};

struct Obstacle {
  float2 pos;
  float radius;
  float strength;
};

struct QuadNode {
  float2 center;
  float size;
  uint childIndex;
  uint startIndex;
  uint count;
  uint flags;
};

StructuredBuffer<Obstacle> obstacles;
StructuredBuffer<Boid> boidsIn;
RWStructuredBuffer<Boid> boidsOut;
StructuredBuffer<QuadNode> quadNodes;
StructuredBuffer<uint> activeNodes;
StructuredBuffer<uint> nodeCount;
StructuredBuffer<uint> boidIndices;

uniform RWStructuredBuffer<uint2> boidNodeAssignment; // Stores node index for each boid
uniform uint numObstacles;
uniform float obstacleAvoidanceWeight;
uniform int useQuadTree;
uniform uint numBoids;
uniform float deltaTime;
uniform float maxSpeed;
uniform float minSpeed;
uniform float edgeMargin;
uniform float visualRangeSq;
uniform float cohesionFactor;
uniform float separationFactor;
uniform float alignmentFactor;
uniform float minDistanceSq;
uniform float turnSpeed;
uniform float xBound;
uniform float yBound;

uniform float teamRatio;
uniform float intraTeamCohesionMultiplier;
uniform float interTeamRepulsionMultiplier;
uniform float officerInfluenceRadius;
uniform float officerInfluenceFactor;
uniform float officerCount;

// Define officer status as a constant to match C# enum
#define BOID_STATUS_REGULAR 0
#define BOID_STATUS_OFFICER 1


StructuredBuffer<uint> gridOffsetBuffer;
float gridCellSize;
uint gridDimY;
uint gridDimX;

uint2 getGridLocation(Boid boid) {
  int x = floor(boid.pos.x / gridCellSize + gridDimX / 2);
  int y = floor(boid.pos.y / gridCellSize + gridDimY / 2);
  return uint2(x, y);
}

uint getGridID(uint2 pos) {
  return (gridDimX * pos.y) + pos.x;
}

// Optimized to reduce register usage
void FindNearbyBoidsQuadTree(float2 position, float radiusSq, inout float2 center, 
                           inout float2 close, inout float2 avgVel, 
                           inout uint sameTeamNeighbours, inout uint otherTeamNeighbours, 
                           uint boidTeam, uint currentBoidIndex) {
    // Use smaller stack size to reduce register pressure
    uint stack[8]; 
    uint stackSize = 0;
    
    // IMPROVED STRATEGY: Start from current boid's assigned node
    // Get the boid's current node assignment 
    uint boidCurrentNodeIdx = 0; // Default to root
    
    // Find the node index for this boid from boidIndices or boidHistory
    for (uint i = 0; i < numBoids; i++) {
        if (boidIndices[i * 2] == currentBoidIndex) {
            boidCurrentNodeIdx = boidIndices[i * 2 + 1];
            break;
        }
    }
    
    // Add the current node and the root node to ensure we have a good starting point
    stack[0] = boidCurrentNodeIdx;
    stackSize = 1;
    
    // Also add the root node if not already added
    if (boidCurrentNodeIdx != 0) {
        stack[stackSize++] = 0;
    }
    
    while (stackSize > 0) {
        // Pop a node from the stack
        uint nodeIndex = stack[--stackSize];
        QuadNode node = quadNodes[nodeIndex];
        
        // Skip empty nodes
        if (node.count == 0) continue;
        
        // Simple distance test using squared distance to center + size
        float2 diff = position - node.center;
        float distSq = dot(diff, diff);
        
        // Use a more generous radius check to ensure we find enough neighbors
        // Reduce the pruning of distant nodes to improve flocking behavior
        if (distSq > radiusSq + node.size * node.size * 4.0) continue;
        
        // Process leaf nodes directly - optimized for lower register usage
        if ((node.flags & NODE_LEAF) != 0) {
            // Skip nodes with invalid indices or empty nodes
            if (nodeIndex >= MaxQuadNodes || node.count == 0) continue;
            
            // CRITICAL FIX: Rather than scanning all boids in the simulation,
            // we need to use neighboring boids more directly. For simplicity,
            // if the leaf node is roughly within radius, consider all its boids.
            
            // First look for node entries in the nearest nodes
            // We'll do a single pass through all boids for simplicity and performance
            uint scanLimit = min(numBoids, 4096u); // Scan more boids if needed
            
            for (uint i = 0; i < scanLimit; i++) {
                uint checkNodeIdx = boidIndices[i * 2 + 1];
                
                // Only process boids in this node or immediate neighbor nodes
                if (checkNodeIdx == nodeIndex) {
                    uint otherBoidIndex = boidIndices[i * 2];
                    
                    // Skip self
                    if (otherBoidIndex == currentBoidIndex) continue;
                    
                    // Get the other boid
                    Boid other = boidsIn[otherBoidIndex];
                    
                    // Calculate squared distance between boids
                    float2 boidDiff = position - other.pos;
                    float boidDistSq = dot(boidDiff, boidDiff);
                    
                    // Only consider boids within visual range
                    if (boidDistSq > 0.0 && boidDistSq < radiusSq) {
                        bool sameTeam = boidTeam == other.team;
                        
                        // Separation: avoid crowding neighbors
                        if (boidDistSq < minDistanceSq) {
                            float factor = sameTeam ? 1.0 : interTeamRepulsionMultiplier;
                            factor /= max(boidDistSq, 0.0001);
                            close += boidDiff * factor;
                        }
                        
                        // Cohesion & alignment (same team only)
                        if (sameTeam) {
                            center += other.pos;   // For cohesion
                            avgVel += other.vel;   // For alignment
                            sameTeamNeighbours++;
                        } else {
                            otherTeamNeighbours++;
                        }
                    }
                }
            }
        } 
        // Add children to stack for non-leaf nodes
        else if (node.childIndex > 0) {
            // Simplified child adding - just add all valid children
            for (uint i = 0; i < 4; i++) {
                uint childIndex = node.childIndex + i;
                // Only add if we have space and child is valid
                if (childIndex < MaxQuadNodes && stackSize < 8) {
                    stack[stackSize++] = childIndex;
                }
            }
        }
    }
}

float2 CalculateObstacleAvoidance(float2 position) {
  float2 avoidanceForce = float2(0, 0);
  
  for (uint i = 0; i < numObstacles; i++) {
    float2 diff = position - obstacles[i].pos;
    float distance = length(diff);
    
    if (distance < obstacles[i].radius) {
      // Normalize and scale the force inversely with distance
      float2 direction = normalize(diff);
      float force = obstacles[i].strength * (1.0 - (distance / obstacles[i].radius));
      avoidanceForce += direction * force;
    }
  }
  
  return avoidanceForce;
}

// Improved cohesion and alignment calculation
void MergedBehaviours(inout Boid boid, uint boidIndex) {
    float2 center = float2(0, 0);
    float2 close = float2(0, 0);
    float2 avgVel = float2(0, 0);
    uint sameTeamNeighbours = 0;
    uint otherTeamNeighbours = 0;

    if (useQuadTree == 1) {
        // Use quad-tree for neighbor finding
        FindNearbyBoidsQuadTree(boid.pos, visualRangeSq, center, close, avgVel, 
                              sameTeamNeighbours, otherTeamNeighbours, boid.team, boidIndex);
    } else {
        // Use existing grid-based approach
        uint2 gridXY = getGridLocation(boid);
        uint cell = getGridID(gridXY);
        
        // Add bounds checking to avoid invalid memory access
        if (cell >= gridDimX * gridDimY || cell < gridDimX * 2) {
            return;
        }
        
        // Existing grid-based code...
        for (uint y = cell - gridDimX; y <= cell + gridDimX; y += gridDimX) {
            // Avoid out-of-bounds access
            if (y < 2 || y >= gridDimX * gridDimY - 1) continue;
            
            uint start = gridOffsetBuffer[y - 2];
            uint end = gridOffsetBuffer[y + 1];
            
            // Ensure start < end to avoid invalid access
            if (start >= end) continue;
            
            for (uint i = start; i < end; i++) {
                // Bounds check
                if (i >= numBoids) continue;
                
                // Skip self
                if (i == boidIndex) continue;
                
                Boid other = boidsIn[i];
                float2 diff = boid.pos - other.pos;
                float distSq = dot(diff, diff);
                
                if (distSq < visualRangeSq && distSq > 0) {
                    bool sameTeam = boid.team == other.team;
                    
                    if (distSq < minDistanceSq) {
                        float repulsionStrength = sameTeam ? 1.0 : interTeamRepulsionMultiplier;
                        float invDistSq = 1.0 / max(distSq, 0.0001); // Avoid division by zero
                        close += diff * invDistSq * repulsionStrength;
                    }
                    
                    if (sameTeam) {
                        center += other.pos;
                        avgVel += other.vel;
                        sameTeamNeighbours++;
                    } else {
                        otherTeamNeighbours++;
                    }
                }
            }
        }
    }
    
    // Apply flocking behaviors with improved handling of edge cases
    if (sameTeamNeighbours > 0) {
        // Calculate average position and velocity
        center /= sameTeamNeighbours;
        avgVel /= sameTeamNeighbours;
        
        // Apply cohesion - steer towards center of mass
        float2 cohesionForce = (center - boid.pos) * (cohesionFactor * intraTeamCohesionMultiplier * deltaTime);
        
        // Apply alignment - steer towards average heading
        float2 alignmentForce = (avgVel - boid.vel) * (alignmentFactor * deltaTime);
        
        // Add forces to boid velocity
        boid.vel += cohesionForce;
        boid.vel += alignmentForce;
    }
    
    // Add special behavior for officers and boids influenced by officers
    // For regular boids - be influenced by officers
    if (boid.status == BOID_STATUS_REGULAR) {
        // Find officer influence
        float2 officerInfluence = float2(0, 0);
        uint officersFound = 0;
        
        // Check all boids for officers (in reality, we'd optimize this with a spatial index)
        for (uint i = 0; i < numBoids; i++) {
            Boid other = boidsIn[i];
            
            // Only consider officers of the same team
            if (other.status == BOID_STATUS_OFFICER && other.team == boid.team) {
                float2 diff = other.pos - boid.pos;
                float distSq = dot(diff, diff);
                
                // Only consider officers within influence radius
                if (distSq < officerInfluenceRadius * officerInfluenceRadius) {
                    // Normalize direction and add to influence
                    // Influence strength decreases with distance
                    float influence = 1.0 - sqrt(distSq) / officerInfluenceRadius;
                    officerInfluence += normalize(diff) * influence;
                    officersFound++;
                }
            }
        }
        
        // Apply officer influence if any officers were found
        if (officersFound > 0) {
            // Normalize and scale the influence
            float influenceMag = length(officerInfluence);
            if (influenceMag > 0.0001) {
                officerInfluence = normalize(officerInfluence) * min(influenceMag, 1.0);
                boid.vel += officerInfluence * (officerInfluenceFactor * deltaTime);
            }
        }
    }
    // For officers - move more deliberately and slower
    else if (boid.status == BOID_STATUS_OFFICER) {
        // Officers move more slowly and deliberately
        boid.vel *= 0.95; // Dampen velocity for more stable movement
    }
    
    // Apply separation - steer away from nearby boids
    if (length(close) > 0.0001) {
        boid.vel += close * (separationFactor * deltaTime);
    }
    
    // Apply obstacle avoidance
    float2 obstacleForce = CalculateObstacleAvoidance(boid.pos);
    if (length(obstacleForce) > 0.0001) {
        boid.vel += obstacleForce * obstacleAvoidanceWeight * deltaTime;
    }
}

void LimitSpeed(inout Boid boid) {
  float speed = length(boid.vel);
  // Avoid division by zero
  if (speed > 0.0001) {
    float clampedSpeed = clamp(speed, minSpeed, maxSpeed);
    boid.vel *= clampedSpeed / speed;
  } else {
    // If speed is near zero, give it a small random velocity
    boid.vel = float2(0.01, 0.01);
  }
}

void KeepInBounds(inout Boid boid) {
  if (abs(boid.pos.x) > xBound) {
    boid.vel.x -= sign(boid.pos.x) * deltaTime * turnSpeed;
  }
  if (abs(boid.pos.y) > yBound) {
    boid.vel.y -= sign(boid.pos.y) * deltaTime * turnSpeed;
  }
}

// Define the UpdateBoids kernel
#pragma kernel UpdateBoids
[numthreads(256, 1, 1)] // Reduce thread count to 256 instead of 1024 to reduce register pressure
void UpdateBoids(uint3 id : SV_DispatchThreadID) {
  if (id.x >= numBoids) {
    return;
  }
  
  Boid boid = boidsIn[id.x];
  
  // OPTIMIZATION: Using local variables for important calculations
  // to reduce register pressure in MergedBehaviours
  float2 center = float2(0, 0);
  float2 close = float2(0, 0);
  float2 avgVel = float2(0, 0);
  uint sameTeamNeighbours = 0;
  uint otherTeamNeighbours = 0;
  
  // Inline the behaviors to reduce function call overhead
  if (useQuadTree == 1) {
    // Use optimized quadtree neighbor search
    FindNearbyBoidsQuadTree(boid.pos, visualRangeSq, center, close, avgVel, 
                          sameTeamNeighbours, otherTeamNeighbours, boid.team, id.x);
  } else {
    // Use grid-based approach
    uint2 gridXY = getGridLocation(boid);
    uint cell = getGridID(gridXY);
    
    // Basic safety check for grid
    if (cell < gridDimX * gridDimY && cell >= gridDimX * 2) {
      for (uint y = cell - gridDimX; y <= cell + gridDimX; y += gridDimX) {
        if (y < 2 || y >= gridDimX * gridDimY - 1) continue;
        
        uint start = gridOffsetBuffer[y - 2];
        uint end = gridOffsetBuffer[y + 1];
        
        if (start < end) {
          for (uint i = start; i < end; i++) {
            if (i < numBoids && i != id.x) {
              Boid other = boidsIn[i];
              float2 diff = boid.pos - other.pos;
              float distSq = dot(diff, diff);
              
              if (distSq < visualRangeSq && distSq > 0) {
                bool sameTeam = boid.team == other.team;
                
                if (distSq < minDistanceSq) {
                  float factor = sameTeam ? 1.0 : interTeamRepulsionMultiplier;
                  factor /= max(distSq, 0.0001);
                  close += diff * factor;
                }
                
                if (sameTeam) {
                  center += other.pos;
                  avgVel += other.vel;
                  sameTeamNeighbours++;
                } else {
                  otherTeamNeighbours++;
                }
              }
            }
          }
        }
      }
    }
  }
  
  // IMPROVED FLOCKING: Make forces stronger and more consistent
  
  // Scale factors based on neighbor count to ensure consistent behavior
  // with both quadtree and grid approaches
  float countFactor = 1.0;
  
  // Apply cohesion and alignment behaviors
  if (sameTeamNeighbours > 0) {
    center /= sameTeamNeighbours;
    avgVel /= sameTeamNeighbours;
    
    // Calculate cohesion force: steer towards center of mass
    float2 cohesionForce = center - boid.pos;
    float cohesionMag = length(cohesionForce);
    if (cohesionMag > 0.0001) {
      // Normalize and apply cohesion with strength proportional to distance
      cohesionForce = normalize(cohesionForce) * min(cohesionMag, 1.0);
      boid.vel += cohesionForce * (cohesionFactor * intraTeamCohesionMultiplier * deltaTime);
    }
    
    // Calculate alignment force: match velocity with neighbors
    float2 alignmentForce = avgVel - boid.vel;
    boid.vel += alignmentForce * (alignmentFactor * deltaTime);
  }
  
  // Add special behavior for officers and boids influenced by officers
  // For regular boids - be influenced by officers
  if (boid.status == BOID_STATUS_REGULAR) {
    // Find officer influence
    float2 officerInfluence = float2(0, 0);
    uint officersFound = 0;
    
    // Check for nearby officers (using the same neighbor search approach)
    for (uint i = 0; i < numBoids; i++) {
      Boid other = boidsIn[i];
      
      // Only consider officers of the same team
      if (other.status == BOID_STATUS_OFFICER && other.team == boid.team) {
        float2 diff = other.pos - boid.pos;
        float distSq = dot(diff, diff);
        
        // Only consider officers within influence radius
        if (distSq < officerInfluenceRadius * officerInfluenceRadius) {
          // Normalize direction and add to influence
          // Influence strength decreases with distance - using quadratic falloff for smoother influence
          float dist = sqrt(distSq);
          float normDist = dist / officerInfluenceRadius;
          float influence = max(0.0, 1.0 - normDist * normDist); // Quadratic falloff
          officerInfluence += normalize(diff) * influence * 0.5; // Reduced strength by 50%
          officersFound++;
        }
      }
    }
    
    // Apply officer influence if any officers were found
    if (officersFound > 0) {
      // Normalize and scale the influence
      float influenceMag = length(officerInfluence);
      if (influenceMag > 0.0001) {
        officerInfluence = normalize(officerInfluence) * min(influenceMag, 1.0);
        boid.vel += officerInfluence * (officerInfluenceFactor * deltaTime);
      }
    }
  }
  // For officers - move more deliberately and slower
  else if (boid.status == BOID_STATUS_OFFICER) {
    // Officers should still move around naturally but a bit slower
    // Less extreme dampening to ensure they still move
    boid.vel *= 0.98; // Slightly dampen velocity (was 0.95)
    
    // Ensure officers don't become stationary
    float speed = length(boid.vel);
    if (speed < minSpeed * 0.75) {
      // Give officers a small random velocity if they're too slow
      boid.vel += float2(
        sin(deltaTime * 100.0 + boid.pos.x * 0.1) * 0.01,
        cos(deltaTime * 100.0 + boid.pos.y * 0.1) * 0.01
      );
    }
  }
  
  // Apply separation: stronger with more neighbors
  float closeMag = length(close);
  if (closeMag > 0.0001) {
    // Scale separation by the magnitude of total separation force
    // This ensures stronger avoidance when there are many close neighbors
    float sepStrength = min(closeMag * 2.0, 5.0); // Cap the max strength
    boid.vel += normalize(close) * sepStrength * (separationFactor * deltaTime);
  }
  
  // Apply obstacle avoidance
  float2 avoidanceForce = CalculateObstacleAvoidance(boid.pos);
  if (length(avoidanceForce) > 0.0001) {
    boid.vel += avoidanceForce * obstacleAvoidanceWeight * deltaTime;
  }
  
  // Limit speed
  float speed = length(boid.vel);
  if (speed > maxSpeed) {
    boid.vel = (boid.vel / speed) * maxSpeed;
  } else if (speed < minSpeed) {
    boid.vel = speed < 0.0001 ? float2(0.01, 0.01) : (boid.vel / speed) * minSpeed;
  }
  
  // Keep in bounds
  if (abs(boid.pos.x) > xBound) {
    boid.vel.x -= sign(boid.pos.x) * deltaTime * turnSpeed;
  }
  if (abs(boid.pos.y) > yBound) {
    boid.vel.y -= sign(boid.pos.y) * deltaTime * turnSpeed;
  }

  // Update positions
  boid.pos += boid.vel * deltaTime;
  boidsOut[id.x] = boid;
}


// Basic random generation
uint randSeed;
uint rngState;
float randPCG(float min, float max) {
  rngState = rngState * 747796405u + 2891336453u;
  uint state = rngState;
  uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
  float f = ((word >> 22u) ^ word) / 4294967296.0;
  return f * (max - min) + min;
}


#pragma kernel GenerateBoids
[numthreads(blockSize, 1, 1)]
void GenerateBoids(uint3 id : SV_DispatchThreadID) {
  if (id.x >= numBoids) {
    return;
  }
  
  // Adjust the random seed for each boid to ensure better randomization
  rngState = randSeed + id.x * 1099511627791; // Large prime multiplier for better distribution
  
  // Distribute boids more evenly within the bounds
  float xPos = randPCG(-xBound * 0.8, xBound * 0.8); // Spread in x
  float yPos = randPCG(-yBound * 0.8, yBound * 0.8); // Spread in y
  boidsOut[id.x].pos = float2(xPos, yPos);
  
  // Ensure at least some minimal velocity in random directions
  float angle = randPCG(0, 3.14159 * 2); // Random angle
  float speed = randPCG(minSpeed, maxSpeed);
  boidsOut[id.x].vel = float2(cos(angle), sin(angle)) * speed;
  
  // Assign team based on team ratio
  uint threshold = (uint)(numBoids * teamRatio);
  boidsOut[id.x].team = id.x < threshold ? 0u : 1u;
  
  // Determine if this boid is an officer
  // Safety check to avoid officerCount > numBoids
  uint actualOfficerCount = min((uint)officerCount, numBoids);
  uint officerThreshold = numBoids - actualOfficerCount;
  
  // Special handling for the case of only one officer
  if (actualOfficerCount == 1 && id.x == numBoids - 1) {
    // Place the single officer in the center with random team
    boidsOut[id.x].pos = float2(0, 0);
    boidsOut[id.x].vel = float2(randPCG(-0.1, 0.1), randPCG(-0.1, 0.1));
    boidsOut[id.x].status = BOID_STATUS_OFFICER;
  } else {
    boidsOut[id.x].status = id.x >= officerThreshold ? BOID_STATUS_OFFICER : BOID_STATUS_REGULAR;
    
    // If this is an officer, set its initial position and velocity
    if (boidsOut[id.x].status == BOID_STATUS_OFFICER) {
      // Spread officers away from center
      float officerIndex = (float)(id.x - officerThreshold);
      float officerRatio = officerIndex / max(1, actualOfficerCount);
      float officerAngle = officerRatio * 3.14159 * 2; // Spread officers in a circle
      
      // Position officers in a circle at 1/3 of the boundary
      float officerDistance = min(xBound, yBound) * 0.33;
      boidsOut[id.x].pos = float2(
        cos(officerAngle) * officerDistance,
        sin(officerAngle) * officerDistance
      );
      
      // Officers start with slow, outward-pointing velocity
      boidsOut[id.x].vel = normalize(boidsOut[id.x].pos) * minSpeed * 1.2;
    }
  }
}
}