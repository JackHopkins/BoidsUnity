struct Boid {
  float2 pos;
  float2 vel;
};

StructuredBuffer<Boid> boidsIn;
RWStructuredBuffer<Boid> boidsOut;
uniform uint numBoids;
uniform float deltaTime;
uniform float maxSpeed;
uniform float minSpeed;
uniform float edgeMargin;
uniform float visualRange;
uniform float cohesionFactor;
uniform float separationFactor;
uniform float alignmentFactor;
uniform float minDistance;
uniform float turnSpeed;
uniform float xBound;
uniform float yBound;

StructuredBuffer<uint> gridOffsetBuffer;
float gridCellSize;
uint gridDimY;
uint gridDimX;

uint2 getGridLocation(Boid boid) {
  int x = floor(boid.pos.x / gridCellSize + gridDimX / 2);
  int y = floor(boid.pos.y / gridCellSize + gridDimY / 2);
  return uint2(x, y);
}

uint getGridID(uint2 pos) {
  return (gridDimX * pos.y) + pos.x;
}

void MergedBehaviours(inout Boid boid) {
  float2 center = 0;
  float2 close = 0;
  float2 avgVel = 0;
  uint neighbours = 0;

  uint2 gridXY = getGridLocation(boid);
  uint cell = getGridID(gridXY);

  // Loop Around Own Cell
  for (uint y = cell - gridDimX; y <= cell + gridDimX; y += gridDimX) {
    uint start = gridOffsetBuffer[y - 2];
    uint end = gridOffsetBuffer[y + 1];
    for (uint i = start; i < end; i++) {
      Boid other = boidsIn[i];
      float dist = distance(boid.pos, other.pos);
      if (dist > 0 && dist < visualRange) {
        if (dist < minDistance) {
          close += boid.pos - other.pos;
        }
        center += other.pos;
        avgVel += other.vel;
        neighbours++;
      }
    }
  }

  if (neighbours > 0) {
    center /= neighbours;
    avgVel /= neighbours;

    boid.vel += (center - boid.pos) * (cohesionFactor * deltaTime);
    boid.vel += (avgVel - boid.vel) * (alignmentFactor * deltaTime);
  }

  boid.vel += close * (separationFactor * deltaTime);
}

void LimitSpeed(inout Boid boid) {
  float speed = length(boid.vel);
  if (speed > maxSpeed) {
    boid.vel = normalize(boid.vel) * maxSpeed;
  } else if (speed < minSpeed) {
    boid.vel = normalize(boid.vel) * minSpeed;
  }
}

void KeepInBounds(inout Boid boid) {
  if (boid.pos.x < - xBound) {
    boid.vel.x += deltaTime * turnSpeed;
  } else if (boid.pos.x > xBound) {
    boid.vel.x -= deltaTime * turnSpeed;
  }

  if (boid.pos.y > yBound) {
    boid.vel.y -= deltaTime * turnSpeed;
  } else if (boid.pos.y < - yBound) {
    boid.vel.y += deltaTime * turnSpeed;
  }
}

#pragma kernel UpdateBoids // ID 0
[numthreads(256, 1, 1)]
void UpdateBoids(uint3 id : SV_DispatchThreadID) {
  if (id.x >= numBoids) {
    return;
  }
  
  Boid boid = boidsIn[id.x];
  
  MergedBehaviours(boid);
  LimitSpeed(boid);
  KeepInBounds(boid);

  // Update positions
  boid.pos += boid.vel * deltaTime;
  boidsOut[id.x] = boid;
}


// Basic random generation
uint randSeed;
uint state;
float wangHash() {
  state = (state ^ 61) ^(state >> 16);
  state *= 9;
  state = state ^(state >> 4);
  state *= 0x27d4eb2d;
  state = state ^(state >> 15);
  return state / 4294967296.0;
}

float randRange(float a, float b) {
  return wangHash() * (b - a) + a;
}

#pragma kernel GenerateBoids // ID 1
[numthreads(256, 1, 1)]
void GenerateBoids(uint3 id : SV_DispatchThreadID) {
  state = randSeed + id.x;
  boidsOut[id.x].pos = float2(randRange(-xBound, xBound), randRange(-yBound, yBound));
  boidsOut[id.x].vel = float2(randRange(-maxSpeed, maxSpeed), randRange(-maxSpeed, maxSpeed));
}
