struct Boid {
  float2 pos;
  float2 vel;
};

StructuredBuffer<Boid> boids;
RWStructuredBuffer<Boid> boidsOut;
RWStructuredBuffer<uint2> gridBuffer;
RWStructuredBuffer<uint> gridOffsetBuffer;
StructuredBuffer<uint> gridOffsetBufferIn;
RWStructuredBuffer<uint> gridSumsBuffer;
StructuredBuffer<uint> gridSumsBufferIn;

float gridCellSize;
uint gridDimY;
uint gridDimX;
uint gridTotalCells;
uint buckets;
uint numBoids;
uint d;

uint getGridID(Boid boid) {
  int x = floor(boid.pos.x / gridCellSize + gridDimX / 2);
  int y = floor(boid.pos.y / gridCellSize + gridDimY / 2);
  return (gridDimX * y) + x;
}

#pragma kernel UpdateGrid // ID 0
[numthreads(256, 1, 1)]
void UpdateGrid(uint3 id : SV_DispatchThreadID, uint localID : SV_GROUPTHREADID) {
  if (id.x >= numBoids) {
    return;
  }

  int gridID = getGridID(boids[id.x]);
  gridBuffer[id.x].x = gridID;
  InterlockedAdd(gridOffsetBuffer[gridID], 1, gridBuffer[id.x].y);
}

#pragma kernel ClearGrid // ID 1
[numthreads(256, 1, 1)]
void ClearGrid(uint3 id : SV_DispatchThreadID) {
  if (id.x >= gridTotalCells) {
    return;
  }

  gridOffsetBuffer[id.x] = 0;
}

groupshared int temp[512];
#pragma kernel PrefixSum // ID 2
[numthreads(256, 1, 1)]
void PrefixSum(uint globalID : SV_DispatchThreadID, uint localID : SV_GROUPTHREADID, uint groupID : SV_GROUPID) {

  int pout = 0, pin = 1;
  temp[localID] = gridOffsetBufferIn[globalID];
  GroupMemoryBarrierWithGroupSync();

  for (uint offset = 1; offset < 256; offset *= 2) {
    pout = 1 - pout; // swap double buffer indices
    pin = 1 - pout;
    if (localID >= offset) {
      temp[pout * 256 + localID] = temp[pin * 256 + localID] + temp[pin * 256 + localID - offset];
    } else {
      temp[pout * 256 + localID] = temp[pin * 256 + localID];
    }
    GroupMemoryBarrierWithGroupSync();
  }

  gridOffsetBuffer[globalID] = temp[pout * 256 + localID];
  if (localID == 0) {
    gridSumsBuffer[groupID] = temp[pout * 256 + 255];
  }
}

#pragma kernel RearrangeBoids // ID 3
[numthreads(256, 1, 1)]
void RearrangeBoids(uint3 id : SV_DispatchThreadID) {
  if (id.x >= numBoids) {
    return;
  }
  
  uint gridID = gridBuffer[id.x].x;
  uint cellOffset = gridBuffer[id.x].y;
  uint index = gridOffsetBuffer[gridID] - 1 - cellOffset;
  boidsOut[index] = boids[id.x];
}

#pragma kernel SumBuckets // ID 4
[numthreads(256, 1, 1)]
void SumBuckets(uint3 id : SV_DISPATCHTHREADID) {
  if (id.x >= buckets) {
    return;
  }

  uint k = id.x;

  if (k < d) {
    gridSumsBuffer[k] = gridSumsBufferIn[k];
  } else {
    gridSumsBuffer[k] = gridSumsBufferIn[k] + gridSumsBufferIn[k - d];
  }
}

#pragma kernel AddSums // ID 5
[numthreads(256, 1, 1)]
void AddSums(uint globalID : SV_DISPATCHTHREADID, uint groupID : SV_GROUPID) {
  gridOffsetBuffer[globalID] += gridSumsBufferIn[groupID - 1];
}