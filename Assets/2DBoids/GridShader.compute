#define MAXINT 0x7FFFFFFF;

struct Boid {
    float2 pos;
    float2 vel;
    float rot;
    float pad0;
    float pad1;
    float pad2;
};

RWStructuredBuffer<Boid> boids;
RWStructuredBuffer<Boid> boidsOut;
RWStructuredBuffer<uint3> gridBuffer;
RWStructuredBuffer<uint> gridCountBuffer;
RWStructuredBuffer<uint> gridOffsetBuffer;
RWStructuredBuffer<uint> gridOffsetBufferIn;
RWStructuredBuffer<uint> gridIndexBuffer;

float gridCellSize;
int gridRows;
int gridCols;
uint gridTotalCells;
uint numBoids;
uint bufferLength;
int d;

uint getGridID(Boid boid) {
    int x = floor(boid.pos.x / gridCellSize + (uint)gridCols/2);
    int y = floor(boid.pos.y / gridCellSize + (uint)gridRows/2);
    return (gridCols * y) + x;
}

#pragma kernel UpdateGrid // ID 0
[numthreads(256,1,1)]
void UpdateGrid (uint3 id : SV_DispatchThreadID)
{
	if(id.x < numBoids) {
			int gridID = getGridID(boids[id.x]);
			gridBuffer[id.x].x = gridID;
			gridBuffer[id.x].y = id.x;
			InterlockedAdd(gridCountBuffer[gridID], 1, gridBuffer[id.x].z);
	}
}
   
#pragma kernel SortGridIndexes // ID 1
[numthreads(256,1,1)]
void SortGridIndexes (uint3 id : SV_DispatchThreadID) 
{
	if(id.x < numBoids) {
		uint gridID = gridBuffer[id.x].x;
		uint cellOffset = gridBuffer[id.x].z;
		uint index = gridOffsetBuffer[gridID] - 1 - cellOffset;
		gridIndexBuffer[index] = gridBuffer[id.x].y;
	}
}
	
#pragma kernel ClearGrid // ID 2
[numthreads(256,1,1)]
void ClearGrid (uint3 id : SV_DispatchThreadID) 
{
    gridCountBuffer[id.x] = 0;
		gridOffsetBuffer[id.x] = 0;
}

#pragma kernel PrefixSum // ID 3
[numthreads(256, 1, 1)]
void PrefixSum(uint id : SV_DispatchThreadID) {
    int k = id.x;

		if(k < pow(2,d)) {
			gridOffsetBuffer[k] = gridOffsetBufferIn[k];
		} else {
			gridOffsetBuffer[k] = gridOffsetBufferIn[k] + gridOffsetBufferIn[k-pow(2,d)];
		}
}

#pragma kernel RearrangeGrid // ID 4
[numthreads(256, 1, 1)]
void RearrangeGrid(uint3 id : SV_DispatchThreadID) {
	uint index = gridIndexBuffer[id.x];
	boidsOut[id.x] = boids[index];
}

#pragma kernel CopyBuffer // ID 5
[numthreads(256, 1, 1)]
void CopyBuffer(uint3 id : SV_DispatchThreadID) {
	uint index = id.x;
	boids[index] = boidsOut[index];
	boids[index].pad1 = 0;
	boids[index].pad2 = 0;
}