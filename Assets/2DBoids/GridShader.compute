#define MAXINT 0x7FFFFFFF;

struct Boid {
    float2 pos;
    float2 vel;
    float rot;
    float pad0;
    float pad1;
    float pad2;
};

RWStructuredBuffer<Boid> boids;
RWStructuredBuffer<Boid> boidsOut;
RWStructuredBuffer<int2> gridBuffer;
RWStructuredBuffer<uint2> gridIndicesBuffer;

float gridCellSize;
int gridRows;
int gridCols;
uint gridTotalCells;
uint numBoids;
uint bufferLength;
int k;
int j;

uint getGridID(Boid boid) {
    int x = floor(boid.pos.x / gridCellSize + (uint)gridCols/2);
    int y = floor(boid.pos.y / gridCellSize + (uint)gridRows/2);
    return (gridCols * y) + x;
}

#pragma kernel UpdateGrid // ID 0
[numthreads(64,1,1)]
void UpdateGrid (uint3 id : SV_DispatchThreadID)
{
    if(id.x < numBoids) {
        int gridID = getGridID(boids[id.x]);
        gridBuffer[id.x].x = gridID;
        gridBuffer[id.x].y = id.x; 
    } else {
			gridBuffer[id.x].x = MAXINT;
		}
}
   
#pragma kernel SortGrid // ID 1
[numthreads(256,1,1)]
void SortGrid (uint3 id : SV_DispatchThreadID) 
{
  uint i = id.x;
	uint ij = i^j;
	
	if(ij > i) {
		int comp = (i&k) == 0 ? 1 : -1;
		int diff = gridBuffer[i].x - gridBuffer[ij].x;

		if (comp * diff > 0) {
			int2 temp = gridBuffer[i];
			gridBuffer[i] = gridBuffer[ij];
			gridBuffer[ij] = temp;
		}
	}
	
}

#pragma kernel ClearGrid // ID 2
[numthreads(256,1,1)]
void ClearGrid (uint3 id : SV_DispatchThreadID) 
{
    gridIndicesBuffer[id.x] = uint2(0,0);
}

#pragma kernel BuildGridIndices // ID 3
[numthreads(64, 1, 1)]
void BuildGridIndices(uint3 DTid : SV_DispatchThreadID) {
	uint i = DTid.x;
	uint iPrev = (i == 0) ? numBoids - 1 : i - 1;
	
	uint iNext = i + 1;
	if (iNext == numBoids) { iNext = 0; }

	uint cell = gridBuffer[i].x;
	uint cellPrev = gridBuffer[iPrev].x;
	uint cellNext = gridBuffer[iNext].x;

	if (cell != cellPrev) {
		gridIndicesBuffer[cell].x = i;
	}

	if (cell != cellNext) {
		gridIndicesBuffer[cell].y = i + 1;
	}
}

#pragma kernel RearrangeGrid // ID 4
[numthreads(64, 1, 1)]
void RearrangeGrid(uint3 DTid : SV_DispatchThreadID) {
	uint index = DTid.x;
	uint id = gridBuffer[index].y;
	boidsOut[index] = boids[id];
}

#pragma kernel CopyBuffer // ID 5
[numthreads(64, 1, 1)]
void CopyBuffer(uint3 DTid : SV_DispatchThreadID) {
	uint index = DTid.x;
	boids[index] = boidsOut[index];
}