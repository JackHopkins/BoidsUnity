#define blockSize 256

struct Boid {
  float3 pos;
  float3 vel;
  float pad0;
  float pad1;
};

StructuredBuffer<Boid> boidsIn;
RWStructuredBuffer<Boid> boidsOut;
uniform uint numBoids;
uniform float deltaTime;
uniform float maxSpeed;
uniform float minSpeed;
uniform float edgeMargin;
uniform float visualRange;
uniform float cohesionFactor;
uniform float separationFactor;
uniform float alignmentFactor;
uniform float minDistance;
uniform float turnSpeed;
uniform float xBound;
uniform float yBound;
uniform float zBound;

StructuredBuffer<uint> gridOffsetBuffer;
float gridCellSize;
uint gridDimX;
uint gridDimY;
uint gridDimZ;

uint3 getGridLocation(Boid boid) {
  int boidX = floor(boid.pos.x / gridCellSize + gridDimX / 2);
  int boidY = floor(boid.pos.y / gridCellSize + gridDimY / 2);
  int boidZ = floor(boid.pos.z / gridCellSize + gridDimZ / 2);
  return uint3(boidX, boidY, boidZ);
}

uint getGridID(uint3 pos) {
  return (gridDimY * gridDimX * pos.z) + (gridDimX * pos.y) + pos.x;
}

void MergedBehaviours(inout Boid boid) {
  float3 center = 0;
  float3 close = 0;
  float3 avgVel = 0;
  uint neighbours = 0;

  uint3 gridXYZ = getGridLocation(boid);
  uint cell = getGridID(gridXYZ);
  uint zStep = gridDimX * gridDimY;

  for (uint z = cell - zStep; z <= cell + zStep; z += zStep) {
    for (uint y = z - gridDimX; y <= z + gridDimX; y += gridDimX) {
      uint start = gridOffsetBuffer[y - 2];
      uint end = gridOffsetBuffer[y + 1];

      for (uint i = start; i < end; i++) {
        Boid other = boidsIn[i];
        float dist = distance(boid.pos, other.pos);
        if (dist > 0 && dist < visualRange) {
          if (dist < minDistance) {
            close += normalize(boid.pos - other.pos) / dist;
          }
          center += other.pos;
          avgVel += other.vel;
          neighbours++;
        }
      }
    }
  }

  if (neighbours > 0) {
    center /= neighbours;
    avgVel /= neighbours;

    boid.vel += (center - boid.pos) * (cohesionFactor * deltaTime);
    boid.vel += (avgVel - boid.vel) * (alignmentFactor * deltaTime);
  }

  boid.vel += close * (separationFactor * deltaTime);
}

void LimitSpeed(inout Boid boid) {
  float speed = length(boid.vel);
  if (speed > maxSpeed) {
    boid.vel = normalize(boid.vel) * maxSpeed;
  } else if (speed < minSpeed) {
    boid.vel = normalize(boid.vel) * minSpeed;
  }
}

void KeepInBounds(inout Boid boid) {
  if (boid.pos.x < - xBound) {
    boid.vel.x += deltaTime * turnSpeed;
  } else if (boid.pos.x > xBound) {
    boid.vel.x -= deltaTime * turnSpeed;
  }

  if (boid.pos.y > yBound) {
    boid.vel.y -= deltaTime * turnSpeed;
  } else if (boid.pos.y < - yBound) {
    boid.vel.y += deltaTime * turnSpeed;
  }

  if (boid.pos.z > zBound) {
    boid.vel.z -= deltaTime * turnSpeed;
  } else if (boid.pos.z < - zBound) {
    boid.vel.z += deltaTime * turnSpeed;
  }
}

#pragma kernel UpdateBoids // ID 0
[numthreads(blockSize, 1, 1)]
void UpdateBoids(uint3 id : SV_DispatchThreadID) {
  if (id.x >= numBoids) {
    return;
  }
  
  Boid boid = boidsIn[id.x];
  
  MergedBehaviours(boid);
  LimitSpeed(boid);
  KeepInBounds(boid);

  // Update positions
  boid.pos += boid.vel * deltaTime;


  boidsOut[id.x] = boid;
}

// Basic random generation
uint randSeed;
uint rngState;
float randPCG(float min, float max) {
  uint state = rngState;
  rngState = rngState * 747796405u + 2891336453u;
  uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
  float f = ((word >> 22u) ^ word) / 4294967296.0;
  return f * (max - min) + min;
}

#pragma kernel GenerateBoids // ID 1
[numthreads(blockSize, 1, 1)]
void GenerateBoids(uint3 id : SV_DispatchThreadID) {
  rngState = randSeed + id.x;
  boidsOut[id.x].pos = float3(randPCG(-xBound, xBound), randPCG(-yBound, yBound), randPCG(-zBound, zBound));
  boidsOut[id.x].vel = float3(randPCG(-maxSpeed, maxSpeed), randPCG(-maxSpeed, maxSpeed), randPCG(-maxSpeed, maxSpeed));
}
