#define MAXINT 0x7FFFFFFF;

struct Boid 
{
    float3 pos;
    float3 vel;
    float4 rot;
    float pad0;
    float pad1;
};

StructuredBuffer<Boid> boids;
RWStructuredBuffer<Boid> boidsOut;
RWStructuredBuffer<uint2> gridBuffer;
RWStructuredBuffer<uint> gridCountBuffer;
RWStructuredBuffer<uint> gridOffsetBuffer;
StructuredBuffer<uint> gridOffsetBufferIn;
RWStructuredBuffer<uint> gridIndexBuffer;

float gridCellSize;
uint gridDimX;
uint gridDimY;
uint gridDimZ;
uint gridTotalCells;
uint numBoids;
int d;

uint getGridID(Boid boid) {
    int boidX = floor(boid.pos.x / gridCellSize + gridDimX/2);
    int boidY = floor(boid.pos.y / gridCellSize + gridDimY/2);
    int boidZ = floor(boid.pos.z / gridCellSize + gridDimZ/2);
    return (gridDimY * gridDimX * boidZ) + (gridDimX * boidY) + boidX;
}

#pragma kernel UpdateGrid // ID 0
[numthreads(256,1,1)]
void UpdateGrid (uint3 id : SV_DispatchThreadID)
{
	if(id.x >= numBoids) {
		return;
	}

	int gridID = getGridID(boids[id.x]);
	gridBuffer[id.x].x = gridID;
	InterlockedAdd(gridCountBuffer[gridID], 1, gridBuffer[id.x].y);
}
   
#pragma kernel SortGridIndexes // ID 1
[numthreads(256,1,1)]
void SortGridIndexes (uint3 id : SV_DispatchThreadID) 
{
  uint gridID = gridBuffer[id.x].x;
	uint cellOffset = gridBuffer[id.x].y;
	uint index = gridOffsetBuffer[gridID] - 1 - cellOffset;
	gridIndexBuffer[index] = id.x;
}

#pragma kernel ClearGrid // ID 2
[numthreads(256,1,1)]
void ClearGrid (uint3 id : SV_DispatchThreadID) 
{
    gridCountBuffer[id.x] = 0;
		gridOffsetBuffer[id.x] = 0;
}

#pragma kernel PrefixSum // ID 3
[numthreads(256, 1, 1)]
void PrefixSum(uint id : SV_DispatchThreadID) {
    int k = id.x;

		if(k < d) {
			gridOffsetBuffer[k] = gridOffsetBufferIn[k];
		} else {
			gridOffsetBuffer[k] = gridOffsetBufferIn[k] + gridOffsetBufferIn[k-d];
		}
}

#pragma kernel RearrangeGrid // ID 4
[numthreads(256, 1, 1)]
void RearrangeGrid(uint3 id : SV_DispatchThreadID) {
	uint index = gridIndexBuffer[id.x];
	boidsOut[id.x] = boids[index];
}